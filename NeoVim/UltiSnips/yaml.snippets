snippet _skel "Cloudformation yaml skeleton" b
---
AWSTemplateFormatVersion: '2010-09-09'
Description: VicRoads Infrastructure for the DLKit project
$0
endsnippet

snippet gatt "Get Attribute"
!GetAtt ${1:${VISUAL}}
endsnippet
snippet ref "Ref"
!Ref ${1:${VISUAL}}
endsnippet

snippet param "Cloudformation parameter without default" b
p${1:ParameterName}:
	Type: ${2:String}
$0
endsnippet

snippet ec2 "Cloudformation ec2 instance" b
${1:EC2ResourceName}:
	Type: "AWS::EC2::Instance"
	Properties:
		AvailabilityZone: $2
		IamInstanceProfile: ${3:!Ref InstanceProfile}
		ImageId: ${4:pAmiId}
		InstanceType: ${5:t2.micro}
		KeyName: ${6:!Ref pKeyName}
		SecurityGroupIds:
			- $7
		SubnetId: ${8}
		Tags:
			-
				${9:Key: "CostCenter"
				Value: !Ref pCostCenter}
		UserData: ${10:Fn::Base64: !Ref pUserData}
endsnippet

snippet sg "Cloudformation security group" b
${1:ResourceName}:
	Type: 'AWS::EC2::SecurityGroup'
	Properties:
		GroupDescription: "${2:Web}SecurityGroup"
		SecurityGroupIngress:
			- IpProtocol: tcp
				FromPort: ${3:!Ref pInstancePort}
				ToPort: ${4:!Ref pInstancePort}
				CidrIp: ${5:'0.0.0.0/0'}
		VpcId: ${0:!Ref pVpcId}
endsnippet

snippet vpclink "Cloudformation vpc link" b
${1:ResourceName}:
	Type: "AWS::ApiGateway::VpcLink"
	Properties:
		Description: "${2:VPC Link description}"
		Name: ${3:!Sub vpclink-${AWS::StackName}}
		TargetArns:
			- !Ref $0
endsnippet

snippet stack "Cloudformation nested stack" b
${1:StackName}:
	Type: AWS::CloudFormation::Stack
	Properties:
		Parameters:
			$2
		TemplateURL: ./$3/$3.yaml
		TimeoutInMinutes: '${0:5}'
endsnippet
snippet eip "Amazong EC2 Elastic IP" b
${1:EIP}:
	Type: AWS::EC2::EIP
	Properties:
		InstanceId: ${2:!Ref EC2Instance}
endsnippet

snippet tmuxinator "Tmuxinator bootstrap" b
name: ${1:Environment name}
root: ${2:`!v expand('%')`}
startup_window: term
windows:
  - editor:  vim ./$3 && exit
  - term: 
endsnippet

snippet lambda "AWS Lambda function" b
${1:LambdaName}:
	Type: "AWS::Lambda::Function"
	Properties:
		Environment:
			Variables:
				${2:Variable}: !Ref p${2}
		Handler: "${3:index.handler}"
		Role: !GetAtt ${4:LambdaRole}.Arn
		Runtime: "${5:nodejs4.3}"
		MemorySize: ${6:128}
		Timeout: "${7:60}"
		VpcConfig:
			SecurityGroupIds:
				- !Ref ${8:pSG}
			SubnetIds:
				- !Ref ${9:pSubA}
				- !Ref ${10:pSubB}
		Code: ./../${11:lambdafunction}.zip
$0
endsnippet

snippet role "IAM Role" b
${1:IamRoleName}:
	Type: "AWS::IAM::Role"
	Properties:
		AssumeRolePolicyDocument:
			Statement:
				-
					$2
		Policies:
			-
				$3
$0
endsnippet

snippet iamsts "IAM STS assume role Policy Document" b
Effect: ${1:Allow}
Principal:
	Service:
		- "${2:lambda.amazonaws.com}"
Action: ["sts:AssumeRole"]
$0
endsnippet

snippet policy "IAM Policy" b
PolicyName: "${1:PolicyName}"
PolicyDocument:
	Statement:
	-
		Effect: Allow
		Action: ["${2:ec2:*}"]
		Resource: ["${3:*}"]
endsnippet
